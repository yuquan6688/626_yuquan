---
title: "Hands-on_Ex02b--2nd Order Spatial Point Patterns Analysis Methods"
description: ""
author: "Li Yuquan"
date: "September 4 2025"
date-modified: "last-modified"
format: html
editor: visual
execute:
  eval: true
  echo: true
  warning: false
---

# 1 Overview

Second-order spatial point pattern analysis examines the spatial relationships between points in a pattern, specifically focusing on how the presence of one point influences the location of others. It goes beyond simply describing the overall density of points (first-order effects) by investigating clustering, dispersion, or randomness at various spatial scales.

Using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?

-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

# 2 **The data**

To provide answers to the questions above, two data sets will be used. They are:

-   *Child Care Services* data from data.gov.sg, a point feature data providing both location and attribute information of childcare centres.

-   *Master Plan 2019 Subzone Boundary (No Sea)*, a polygon feature data providing information of URA 2019 Master Plan Planning Subzone boundary data.

Both data sets are available at [Singapore’s open data portal](https://r4gdsa.netlify.app/data.gov.sg). They are provided in kml and geojson format. Students are free to download their preferred data format.

# 3 **Installing and Loading the R packages**

In this hands-on exercise, three R packages will be used, they are:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

-   [tidyverse](https://www.tidyverse.org/), a family of R packages designed for modern data science. These packages are developed to work together seamlessly, sharing a common design philosophy, grammar, and data structures, which aims to make data manipulation, analysis, and visualization in R more intuitive and efficient.

Use the code chunk below to install and launch the five R packages.

```{r}
pacman::p_load(sf, spatstat, tmap, tidyverse, purrr, xml2)
```

# 4 **Data Import and Preparation**

```{r}
kml_mpsz  <- "data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml"
kml_child <- "data/ChildCareServices.kml"


extract_kml_field <- function(html_text, field_name) {
  if (is.na(html_text) || html_text == "") return(NA_character_)
  page <- rvest::read_html(html_text)
  rows <- page %>% rvest::html_elements("tr")
  value <- rows %>%
    purrr::keep(~ rvest::html_text2(rvest::html_element(.x, "th")) == field_name) %>%
    rvest::html_element("td") %>%
    rvest::html_text2()
  if (length(value) == 0) NA_character_ else value
}


mpsz_sf <- sf::st_read(kml_mpsz) %>%
  sf::st_zm(drop = TRUE, what = "ZM") %>%
  sf::st_transform(crs = 3414) %>%
  dplyr::mutate(
    REGION_N   = purrr::map_chr(Description, extract_kml_field, "REGION_N"),
    PLN_AREA_N = purrr::map_chr(Description, extract_kml_field, "PLN_AREA_N"),
    SUBZONE_N  = purrr::map_chr(Description, extract_kml_field, "SUBZONE_N"),
    SUBZONE_C  = purrr::map_chr(Description, extract_kml_field, "SUBZONE_C")
  ) %>%
  dplyr::select(-Name, -Description) %>%
  dplyr::relocate(geometry, .after = dplyr::last_col())


mpsz_cl <- mpsz_sf %>%
  dplyr::filter(
    SUBZONE_N  != "SOUTHERN GROUP",
    PLN_AREA_N != "WESTERN ISLANDS",
    PLN_AREA_N != "NORTH-EASTERN ISLANDS"
  )


childcare_sf <- sf::st_read(kml_child) %>%
  sf::st_zm(drop = TRUE, what = "ZM") %>%
  sf::st_transform(crs = 3414) %>%
  dplyr::filter(!sf::st_is_empty(geometry))  # guard against empties


childcare_ppp <- spatstat.geom::as.ppp(childcare_sf)
spatstat.geom::unitname(childcare_ppp) <- "metre"        # explicit unit
childcare_ppp <- spatstat.geom::unique.ppp(childcare_ppp) # remove duplicates


sg_owin        <- spatstat.geom::as.owin(mpsz_cl)
childcareSG_ppp <- childcare_ppp[sg_owin]


pg_owin <- spatstat.geom::as.owin(dplyr::filter(mpsz_cl, PLN_AREA_N == "PUNGGOL"))
tm_owin <- spatstat.geom::as.owin(dplyr::filter(mpsz_cl, PLN_AREA_N == "TAMPINES"))
ck_owin <- spatstat.geom::as.owin(dplyr::filter(mpsz_cl, PLN_AREA_N == "CHOA CHU KANG"))
jw_owin <- spatstat.geom::as.owin(dplyr::filter(mpsz_cl, PLN_AREA_N == "JURONG WEST"))

childcare_pg_ppp <- childcareSG_ppp[pg_owin]
childcare_tm_ppp <- childcareSG_ppp[tm_owin]
childcare_ck_ppp <- childcareSG_ppp[ck_owin]
childcare_jw_ppp <- childcareSG_ppp[jw_owin]

```

# 5 Analysing Spatial Point Process Using G-Function

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using [*Gest()*](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

## 5.1 **Choa Chu Kang planning area**

```{r}
# Computing G-function estimation
set.seed(1234)
```

The code chunk below is used to compute G-function using *Gest()* of **spatat** package.

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

### 5.1.1 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-fucntion

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

## 5.2 **Tampines planning area**

### 5.2.1 Computing G-function estimation

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

### 5.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

# 6 **Analysing Spatial Point Process Using F-Function**

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using [*Fest()*](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

## 6.1 **Choa Chu Kang planning area**

### 6.1.1 Computing F-function estimation

The code chunk below is used to compute F-function using *Fest()* of **spatat** package.

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

## 6.2 **Performing Complete Spatial Randomness Test**

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-fucntion

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)

```

```{r}
plot(F_CK.csr)
```

## 6.3 **Tampines planning area**

### 6.3.1 Computing F-function estimation

Monte Carlo test with F-fucntion

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

### 6.3.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

# 7 **Analysing Spatial Point Process Using K-Function**

K-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using [*Kest()*](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using *envelope()* of spatstat package.

## 7.1 **Choa Chu Kang planning area**

### 7.1.1 Computing K-fucntion estimate

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

## 7.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

## 7.2 **Tampines planning area**

### 7.2.1 Computing K-fucntion estimation

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))

```

### 7.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

# 8 **Analysing Spatial Point Process Using L-Function**

In this section, you will learn how to compute L-function estimation by using [*Lest()*](https://rdrr.io/cran/spatstat/man/Lest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using *envelope()* of spatstat package.

## 8.1 **Choa Chu Kang planning area**

### 8.1.1  Computing L Fucntion estimation

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

### 8.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")

```

## 8.2 **Tampines planning area**

### 8.2.1 Computing L-fucntion estimate

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

### 8.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below will be used to perform the hypothesis testing.

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
